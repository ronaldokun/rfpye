# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/.ipynb_checkpoints/06_meta-checkpoint.ipynb (unless otherwise specified).

__all__ = ['extract_metadata']

# Cell
import os
from collections import defaultdict
from fastcore.basics import partialler, listify, detuplify
from fastcore.utils import parallel
from fastcore.foundation import L
from .utils import df_optimize, getattrs
from .constants import BLOCK_ATTRS
import pandas as pd
from typing import Iterable, Union

# Cell
def extract_metadata(parsed_blocks: dict) -> dict:
    if not isinstance(parsed_blocks, dict):
        raise TypeError(
            f"It's expected the argument {parsed_blocks} to be a mapping from block attributes to a list of Blocks"
        )
    meta = {'fluxos': []}
    for keys, blocks in parsed_blocks.items():
        block_type = keys[0][1]
        attrs = BLOCK_ATTRS.get(block_type)
        meta_keys = dict(keys)
        if isinstance(attrs, Iterable) and len(attrs):
            extractor = partialler(getattrs, attrs=attrs)
            if len(attrs) == 1:
                meta_keys['timestamp'] = blocks.map(extractor)
            meta['fluxos'].append(meta_keys)
        else:
            meta_keys.pop('type')
            meta_keys.pop('thread_id')
            meta.update(meta_keys)
    return meta

#     func = partialler(_extract_metadata, attributes=attributes)
#     func.__module__ = _extract_metadata.__module__
#     return dict(parallel(func, list(blocks.items()), n_workers=os.cpu_count()))